{
  "openapi": "3.0.3",
  "info": {
    "title": "GoIT Final team project",
    "description": "GoIT Final team project",
    "version": "1.5.1",
    "contact": {
      "name": "Yaroslav Bernatovych",
      "url": "https://github.com/yabr87"
    }
  },
  "servers": [
    {
      "url": "https://purrfect-match.onrender.com"
    },
    {
      "url": "http://127.0.0.1:3001"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "operationId": "registerUser",
        "tags": [
          "Auth"
        ],
        "summary": "Register new user",
        "description": "Register new user",
        "requestBody": {
          "$ref": "#/components/requestBodies/Credentials"
        },
        "responses": {
          "201": {
            "description": "New user successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "Current email is in use. Try another one.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email in use"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "operationId": "loginUser",
        "tags": [
          "Auth"
        ],
        "summary": "Login registered user",
        "requestBody": {
          "$ref": "#/components/requestBodies/Credentials"
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/refresh": {
      "post": {
        "operationId": "refreshUser",
        "summary": "Refresh access token and return brief user info",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "operationId": "logoutUser",
        "tags": [
          "Auth"
        ],
        "summary": "Log out current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "operationId": "getUserInfo",
        "tags": [
          "Auth"
        ],
        "summary": "Get current user info",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "operationId": "updateUserInfo",
        "tags": [
          "Auth"
        ],
        "summary": "Update current user info",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserWithAvatar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/users/current/avatar": {
      "patch": {
        "operationId": "updateUserAvatar",
        "tags": [
          "Auth"
        ],
        "summary": "Update current user avatar",
        "description": "Update current user avatar",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "User avatar image file."
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "avatarUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "User's avatar URL",
                      "example": "http://cloud-storage.com/avatar.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/notices": {
      "get": {
        "operationId": "getNotices",
        "tags": [
          "Notices"
        ],
        "summary": "Get notices.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "lost-found",
                "for-free"
              ]
            }
          },
          {
            "name": "title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sex",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "male",
                "female"
              ]
            }
          },
          {
            "name": "age",
            "in": "query",
            "description": "Full years. Can be used like \"age=1&age=2\" or like \"age=1,2\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "favorite",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "own",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalResults": {
                      "type": "number",
                      "example": 1
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "number",
                      "example": 1
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Notice"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addNotice",
        "tags": [
          "Notices"
        ],
        "summary": "Add new notice",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Notice"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/notices/{noticeId}": {
      "get": {
        "operationId": "getNoticeById",
        "tags": [
          "Notices"
        ],
        "summary": "Get notice by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "operationId": "removeNoticeById",
        "tags": [
          "Notices"
        ],
        "summary": "Remove notice by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/notices/{noticeId}/favorite": {
      "post": {
        "operationId": "addToFavorites",
        "tags": [
          "Notices"
        ],
        "summary": "Add the notice to favorites",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "operationId": "removeFromFavorites",
        "tags": [
          "Notices"
        ],
        "summary": "Remove the notice from favorites",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "operationId": "updateFavorite",
        "tags": [
          "Notices"
        ],
        "summary": "Add or remove the notice from favorites",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "favorite": {
                    "type": "boolean",
                    "description": "If the favorite is true, add to favorites, otherwise remove from favorites"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/pets": {
      "get": {
        "operationId": "getPets",
        "tags": [
          "Pets"
        ],
        "summary": "Get pets",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalResults": {
                      "type": "number",
                      "example": 1
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "number",
                      "example": 1
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "operationId": "addPet",
        "tags": [
          "Pets"
        ],
        "summary": "Add my pet",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pet successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/pets/{petId}": {
      "delete": {
        "operationId": "removePet",
        "tags": [
          "Pets"
        ],
        "summary": "Remove pet from list",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Notices"
    },
    {
      "name": "Pets"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "message"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB user ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email",
            "example": "john.smith@mail.com"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Valid user birthday",
            "example": "1976-05-24T00:00:00.000Z"
          },
          "city": {
            "type": "string",
            "description": "User location",
            "example": "Kyiv"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+380671234567"
          },
          "avatarUrl": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar URL",
            "readOnly": true,
            "example": "http://cloud-storage.com/avatar.jpg"
          }
        }
      },
      "UserWithAvatar": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string",
                "format": "binary",
                "description": "User avatar image file. Only for multipart/form-data",
                "writeOnly": true
              }
            }
          }
        ]
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Registered user email"
          },
          "avatarUrl": {
            "type": "string",
            "format": "url",
            "description": "User's avatar url"
          }
        },
        "example": {
          "name": "User",
          "email": "user@mail.com",
          "avatarUrl": "http://cloud-storage.com/avatar.jpg"
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "format": "jwt",
            "description": "Authorization token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDRlOGM1NjIzOTljNTAwMTRiMjljYmIiLCJpYXQiOjE2ODI4NjkzMzR9.XfBVz0mlvLZOS8xnz52-yvpT4jEh-TWapes-jr9fgIc"
          },
          "user": {
            "$ref": "#/components/schemas/UserInfo"
          }
        },
        "required": [
          "token",
          "user"
        ]
      },
      "Notice": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id generated by MongoDB",
            "readOnly": true
          },
          "category": {
            "type": "string",
            "enum": [
              "sell",
              "lost-found",
              "for-free"
            ]
          },
          "title": {
            "type": "string",
            "description": "Notice title"
          },
          "name": {
            "type": "string",
            "description": "Pet name"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pet breed"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "description": "Pet sex"
          },
          "location": {
            "type": "string",
            "description": "The city where the pet is locatate"
          },
          "price": {
            "type": "number",
            "description": "Pet price"
          },
          "comments": {
            "type": "string",
            "description": "Any comment you want"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Pet photo"
          },
          "favorite": {
            "type": "boolean",
            "readOnly": true
          },
          "own": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "example": {
          "category": "sell",
          "title": "Cute dog looking for a home",
          "name": "Rich",
          "birthday": "2020-09-24T00:00:00.000Z",
          "breed": "Pomeranian",
          "sex": "male",
          "location": "Lviv",
          "price": 120,
          "comments": "Rich would be the perfect addition to an active family that loves to play and go on walks. I bet he would love having a doggy playmate too!",
          "favorite": true,
          "own": false
        }
      },
      "Pet": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id generated by MongoDB",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Pet name"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pet breed"
          },
          "comments": {
            "type": "string",
            "description": "Any comment you want"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "Pet photo"
          },
          "photoUrl": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Stored photo link"
          }
        },
        "example": {
          "name": "Rich",
          "birthday": "2020-09-21T00:00:00.000Z",
          "breed": "Pomeranian",
          "sex": "male",
          "comments": "My lovely doggy!"
        }
      }
    },
    "requestBodies": {
      "Credentials": {
        "description": "Credentials required for registration and login",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "User email"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "minLength": 6,
                  "maxLength": 16,
                  "description": "User password. The password must contain at least 1 uppercase letter, 1 lowercase letter and 1 digit."
                }
              },
              "required": [
                "email",
                "password"
              ],
              "example": {
                "email": "user@mail.com",
                "password": "user7A"
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Validation error message"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "User isn't authorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Unauthorized"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Not found"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}